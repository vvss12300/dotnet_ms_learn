Basic Infra:
- ASP.NET Core Web Api
	-- Can go to EC2
	-- Amazon ECS + docker + App Mesh
	
- AWS Lamda .Net Core
	-- Deployed to AWS Lamda
	

In more detail:

Dynamic Content: User -> Cloud Front -> App Load Balancer -> ECS -> DB
Static Content: User -> Cloud Front -> S3


AWS Congnito:
For IDP and Authentication purpose

API Gateway:
- API Catalogue and docs
- Simiplifies monitoring
- Can perform Authentication and Autherization
- Options:
	- AWS API Gateway
	- Google Apigee
	- Kong

Microservices:
- Microservice Chassis
	- Foundation for developing microservices and performing cross-cutting tasks
- Each MS is designed to handle a specific business capability
- The domain boundary separates one MS from another
- By defining clear domain boundaries, microservies can be independently developed, deployed and scaled



Types for Microservices
- Serverless 
	- Chassis provided by cloud provider
	- Scalling is provided by cloud provider
	- No access to the execution env
	
- Containerized
	- Application and OS are packaged into one image i.e. a Docker Image
	- Can be deployed to a container platform i.e. Kubernetes
	- Access to execution env via ssh or RDP
	- No limitation to dev languages
	- Can support complex deployment scenarios e.g. Blue/Green deployment
	
	
Create Lamda with API Gateway:
- Create a class Library 
- Add dependencies
	- Amazon.Lambda.Core
	- Amazon.Lambda.APIGatewayEvents
	- Amazon.Lambda.Serialization.SystemTextJson
- Install tools for packages
	- dotnet tool install --global Amazon.Lambda.Tools --version 5.6.6
- Code a lamda function
- Package  a function	
	- dotnet lambda package <csproj> -o package.zip
- Go to AWS Console
	- Create a function
	- Select .Net Core 6
	- In the code, upload the zip
	- Test the service
	- Monitor the logs
- Create IAM role and give lamda permission for S3 or DynamoDb permission
	- Db connection string can be provided via Env Variable in Lambda
- DynamoDb
	- Create a Table
	- Partition Key:  for partition and sharding
- Add data saving and fetching logic in lambda code
	- add reference to AWSSDK.DynamoDb
- Go to APi Gateway
	- Add Resource
	- Point to lambda
- Test using Postman


CQRS Pattern
- Command Query Responsibility Segregation
- Segregates command and query for improved performance
	- command that inserts and update data 
	- query that read data
- Why?
	- The volume of read is higher than write
	- Read queries are complex then write
	- Useful when read need to performed on multiple sources and result need to be aggregated
- Pattern
	Client -> Command -> Write Database
	Write Database -> Sends Event to Event Bus
	Read Service -> Listen to event bus -> Apply Transform -> Store in Read Database
	Client -> Query -> Read Database
	
	
Fan Out Pattern
- MS published an event
- Event Bus poulates the event to many subscribes concurrently
- To solve this, we use Idempotent Consumer pattern:
	- Assign unique Id to event
	- MS stores the event id to table
	- On recieving the event, MS first checks table if another MS is processing the request
	- If yes, then ignore the event else add that to table

SNS (Simple Notification Service)
- FIFO
	- Maintains message ordering
	- Exactly once delivery
	- Protocol: SQS
	
- Standard	
	- Doesn't Guarantee Ordering (on  Best Effort basis)
	- Highest throughput
	- Protocols: SQS, Lambda, HTTP, SMS, Email, Mobile Application Endpoints

- Publish SNS via Lambda
	- Create a topic and copy arn
	- Give Lambda access (IAM Role) to raise a SNS topic
	- Add topic arn as Env variable in Lambda (Best practice)
	- Go to code
		- Add nuget package: Amazon.SimpleNotificationService
		- var snsClient = new AmazonSimpleNotificationServiceClient();
		- var snsResponse = await snsClient.PublishAsync(Environment.GetEnvironmentVariable("SNSTopic"), JsonConvert.SerializeObject(hotel));
		

Amazon OpenSearch Service
- To quicky searching data
- Based on Elastic Search
- Every search instance is called domain
- Costly (based on cluster configuration)


Containerization:
Packaging and Deploying app in a lightweighht and portable env called a container
Includes
	- OS
	- App 
	- App dependencies
Benefits:
	- Can be deployed on any cloud provider or on-prem
	- Control over execution env
	- Not limited to any programming language
Docker is a famous Containerization software
	- Contents to create a container is stored in a file called image
	- Docker container is the realization of docker image
	
Process of Creating a Docker Image
- Write and publish Code
- Create a file called "dockerfile"
- Run "docker build command" to create image
- Push the image to Container Registry
- Deploy to desired env

Docker Services in AWS:
- ECS
	- Fargate (Fully managed by AWS)
		- Task: Short lived, small and stateless operations
		- Service: Long lived, stateful and larger containers
	- EC2 (managed by us): Better for high load or traffic systems
	- EKS: Elastic Kubernatics service
